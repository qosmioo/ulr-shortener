// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: shortener.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCHandler_GetUrl_FullMethodName     = "/url_shortener.GRPCHandler/GetUrl"
	GRPCHandler_ShortenUrl_FullMethodName = "/url_shortener.GRPCHandler/ShortenUrl"
)

// GRPCHandlerClient is the client API for GRPCHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCHandlerClient interface {
	GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error)
	ShortenUrl(ctx context.Context, in *ShortenUrlRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error)
}

type gRPCHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCHandlerClient(cc grpc.ClientConnInterface) GRPCHandlerClient {
	return &gRPCHandlerClient{cc}
}

func (c *gRPCHandlerClient) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUrlResponse)
	err := c.cc.Invoke(ctx, GRPCHandler_GetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCHandlerClient) ShortenUrl(ctx context.Context, in *ShortenUrlRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenUrlResponse)
	err := c.cc.Invoke(ctx, GRPCHandler_ShortenUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCHandlerServer is the server API for GRPCHandler service.
// All implementations must embed UnimplementedGRPCHandlerServer
// for forward compatibility.
type GRPCHandlerServer interface {
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
	ShortenUrl(context.Context, *ShortenUrlRequest) (*ShortenUrlResponse, error)
	mustEmbedUnimplementedGRPCHandlerServer()
}

// UnimplementedGRPCHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCHandlerServer struct{}

func (UnimplementedGRPCHandlerServer) GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedGRPCHandlerServer) ShortenUrl(context.Context, *ShortenUrlRequest) (*ShortenUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenUrl not implemented")
}
func (UnimplementedGRPCHandlerServer) mustEmbedUnimplementedGRPCHandlerServer() {}
func (UnimplementedGRPCHandlerServer) testEmbeddedByValue()                     {}

// UnsafeGRPCHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCHandlerServer will
// result in compilation errors.
type UnsafeGRPCHandlerServer interface {
	mustEmbedUnimplementedGRPCHandlerServer()
}

func RegisterGRPCHandlerServer(s grpc.ServiceRegistrar, srv GRPCHandlerServer) {
	// If the following call pancis, it indicates UnimplementedGRPCHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCHandler_ServiceDesc, srv)
}

func _GRPCHandler_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCHandlerServer).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCHandler_GetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCHandlerServer).GetUrl(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCHandler_ShortenUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCHandlerServer).ShortenUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCHandler_ShortenUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCHandlerServer).ShortenUrl(ctx, req.(*ShortenUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCHandler_ServiceDesc is the grpc.ServiceDesc for GRPCHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_shortener.GRPCHandler",
	HandlerType: (*GRPCHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUrl",
			Handler:    _GRPCHandler_GetUrl_Handler,
		},
		{
			MethodName: "ShortenUrl",
			Handler:    _GRPCHandler_ShortenUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
